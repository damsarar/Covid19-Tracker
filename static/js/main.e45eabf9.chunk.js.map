{"version":3,"sources":["StatCard.js","logger.js","ConfirmedStatChart.js","DayByDayChart.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["CardTile","Card","text","style","backgroundColor","this","props","color","Body","Title","title","Text","fontSize","value","React","Component","log","data1","type","console","debug","error","ConfirmedStatChart","chartRef","createRef","buildChart","myChartRef","current","getContext","labels","state","chartLabelsArray","data","chartDataArray","Chart","datasets","label","borderColor","options","chartArray","fetch","then","res","json","results","setState","forEach","key","date","moment","Date","format","push","Cases","catch","border","id","ref","DayByDayChart","lineTension","order","difference","chartCasesTotal","Homepage","dataArray","hospitalArray","hospital_data","no","Intl","NumberFormat","Navbar","bg","variant","Brand","href","Nav","className","Link","update_date_time","Container","width","Row","Col","xs","md","textAlign","StatCard","separator","local_new_cases","local_total_cases","local_deaths","local_recovered","global_new_cases","global_total_cases","global_deaths","global_recovered","minWidth","local_active_cases","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e45eabf9.chunk.js","sourcesContent":["import React from 'react'\nimport Card from 'react-bootstrap/Card'\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// import AIcon from '@material-ui/icons/AccessAlarm';\n\nclass CardTile extends React.Component {\n    render() {\n        return ( <\n            div >\n            <\n            Card text = \"white\"\n            style = {\n                { backgroundColor: this.props.color }\n            } >\n            <\n            Card.Body >\n            <\n            Card.Title > { this.props.title } < /Card.Title> <\n            Card.Text style = {\n                { fontSize: \"36px\" }\n            } >\n\n            { this.props.value } <\n            /Card.Text> < /\n            Card.Body > <\n            /Card> < /\n            div >\n\n        )\n    }\n}\n\nexport default CardTile","const IS_DEBUGGING = true;\nexport const log = (title = \"\", data1 = null, type = \"debug\") => {\n  if (IS_DEBUGGING && type === \"debug\") {\n    console.debug(title, data1);\n  }\n  if (IS_DEBUGGING && type === \"error\") {\n    console.error(title, data1);\n  }\n};\n","import React from \"react\";\nimport Chart from \"chart.js\";\nimport moment from \"moment\";\nimport { Card } from \"react-bootstrap\";\nimport { log } from \"./logger\";\n\nclass ConfirmedStatChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chartArray: [],\n      chartLabelsArray: [],\n      chartDataArray: [],\n    };\n  }\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    fetch(\"https://api.covid19api.com/country/sri-lanka/status/confirmed/live\")\n      .then((res) => res.json())\n      .then((results) => {\n        this.setState({\n          chartArray: results,\n        });\n\n        this.state.chartArray.forEach((data, key) => {\n          var date = moment(data.Date).format(\"MM / DD\");\n          this.state.chartLabelsArray.push(date);\n          this.state.chartDataArray.push(data.Cases);\n        });\n\n        this.buildChart();\n      })\n      .catch((error) => {\n        log(\"Error: \", error);\n      });\n  }\n\n  buildChart = () => {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    const labels = this.state.chartLabelsArray;\n    const data = this.state.chartDataArray;\n\n    new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        //Bring in data\n        labels: labels,\n        datasets: [\n          {\n            label: \"Total number of COVID-19 confirmed cases\",\n            data: data,\n            backgroundColor: \"rgba(255, 206, 86, 0.2)\",\n            borderColor: \"rgba(255, 206, 86, 1)\",\n          },\n        ],\n      },\n      options: {\n        //Customize chart options\n      },\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Card border=\"secondary\">\n            <Card.Body>\n              <canvas id=\"myChart\" ref={this.chartRef} />\n            </Card.Body>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ConfirmedStatChart;\n","import React from \"react\";\nimport Chart from \"chart.js\";\nimport moment from \"moment\";\nimport { Card } from \"react-bootstrap\";\nimport { log } from \"./logger\";\n\nclass DayByDayChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chartArray: [],\n      chartLabelsArray: [],\n      chartDataArray: [],\n    };\n  }\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    fetch(\"https://api.covid19api.com/country/sri-lanka/status/confirmed/live\")\n      .then((res) => res.json())\n      .then((results) => {\n        this.setState({\n          chartArray: results,\n        });\n\n        this.state.chartArray.forEach((data, key) => {\n          var date = moment(data.Date).format(\"MM / DD\");\n          this.state.chartLabelsArray.push(date);\n\n          if (key - 1 === -1) {\n            this.state.chartDataArray.push(this.state.chartArray[key].Cases);\n          } else {\n            const difference =\n              this.state.chartArray[key].Cases -\n              this.state.chartArray[key - 1].Cases;\n            this.state.chartDataArray.push(difference);\n            log(difference);\n          }\n        });\n\n        this.buildChart();\n\n        log(this.state.chartCasesTotal);\n      })\n      .catch((error) => {\n        log(\"Error: \", error);\n      });\n  }\n\n  buildChart = () => {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    const labels = this.state.chartLabelsArray;\n    const data = this.state.chartDataArray;\n\n    new Chart(myChartRef, {\n      type: \"bar\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"\",\n            data: data,\n            backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n          },\n          {\n            label: \"Total number of COVID-19 confirmed cases on a day\",\n            data: data,\n            type: \"line\",\n            borderColor: \"rgba(54, 162, 235, 1)\",\n            lineTension: \"0.2\",\n            order: 1,\n          },\n        ],\n      },\n      options: {},\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Card border=\"secondary\">\n            <Card.Body>\n              <canvas id=\"myChart\" ref={this.chartRef} />\n            </Card.Body>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DayByDayChart;\n","import React from \"react\";\nimport StatCard from \"./StatCard\";\nimport ConfirmedStatChart from \"./ConfirmedStatChart\";\nimport DayByDayChart from \"./DayByDayChart\";\nimport { Container, Card } from \"react-bootstrap\";\nimport { Row } from \"react-bootstrap\";\nimport { Col } from \"react-bootstrap\";\nimport { Navbar } from \"react-bootstrap\";\nimport { Nav } from \"react-bootstrap\";\nimport \"./App.css\";\n\nclass Homepage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataArray: [],\n      hospitalArray: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://hpb.health.gov.lk/api/get-current-statistical\")\n      .then((res) => res.json())\n      .then((results) => {\n        this.setState({\n          dataArray: results.data,\n          hospitalArray: results.data.hospital_data,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  separator(no) {\n    let nfObject = new Intl.NumberFormat(\"en-US\");\n    let output = nfObject.format(no);\n    return output;\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"\">\n            <h3>COVID-19 Tracker</h3>\n          </Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"\">\n              <h6>Last updated at - {this.state.dataArray.update_date_time}</h6>\n            </Nav.Link>\n          </Nav>\n        </Navbar>\n        <div>\n          <Container style={{ width: \"100%\" }} className=\"pr-0\">\n            <Row style={{ width: \"100%\" }} className=\"pr-0\">\n              <Col xs={12} md={6} className=\"mt-4 pr-0\">\n                <Container style={{ textAlign: \"center\" }} className=\"pr-0\">\n                  <Row style={{ width: \"100%\" }} className=\"pr-0\">\n                    <Col>\n                      <h5>Sri Lankan Statistics</h5>\n                    </Col>\n                  </Row>\n                  <Row style={{ width: \"100%\" }} className=\"pr-0\">\n                    <Col xs={12} md={6} className=\"mt-2 pr-0\">\n                      <StatCard\n                        title=\"New Cases\"\n                        value={this.separator(\n                          this.state.dataArray.local_new_cases\n                        )}\n                        color=\"#025E97\"\n                      ></StatCard>\n                    </Col>\n\n                    <Col xs={12} md={6} className=\"mt-2 pr-0\">\n                      <StatCard\n                        title=\"Total Cases\"\n                        value={this.separator(\n                          this.state.dataArray.local_total_cases\n                        )}\n                        color=\"#FF9700 \"\n                      ></StatCard>\n                    </Col>\n                  </Row>\n                  <Row style={{ width: \"100%\" }} className=\"pr-0\">\n                    <Col xs={12} md={6} className=\"mt-2 pr-0\">\n                      <StatCard\n                        title=\"Total Deaths\"\n                        value={this.separator(\n                          this.state.dataArray.local_deaths\n                        )}\n                        color=\"#D80505\"\n                      ></StatCard>\n                    </Col>\n                    <Col xs={12} md={6} className=\"mt-2 pr-0\">\n                      <StatCard\n                        title=\"Total Recovered\"\n                        value={this.separator(\n                          this.state.dataArray.local_recovered\n                        )}\n                        color=\"#5AA001\"\n                      ></StatCard>\n                    </Col>\n                  </Row>\n                </Container>\n              </Col>\n\n              <Col xs={12} md={6} className=\"mt-4 pr-0\">\n                <Container style={{ width: \"100%\" }} className=\"pr-0\">\n                  <Row style={{ width: \"100%\" }} className=\"pr-0\">\n                    <Col>\n                      <h5>Global Statistics</h5>\n                    </Col>\n                  </Row>\n                  <Row style={{ width: \"100%\" }} className=\"pr-0\">\n                    <Col xs={12} md={6} className=\"mt-2 pr-0\">\n                      <StatCard\n                        title=\"New Cases\"\n                        value={this.separator(\n                          this.state.dataArray.global_new_cases\n                        )}\n                        color=\"#025E97\"\n                      ></StatCard>\n                    </Col>\n                    <Col xs={12} md={6} className=\"mt-2 pr-0\">\n                      <StatCard\n                        title=\"Total Cases\"\n                        value={this.separator(\n                          this.state.dataArray.global_total_cases\n                        )}\n                        color=\"#FF9700 \"\n                      ></StatCard>\n                    </Col>\n                  </Row>\n                  <Row style={{ width: \"100%\" }} className=\"pr-0\">\n                    <Col xs={12} md={6} className=\"mt-2 pr-0\">\n                      <StatCard\n                        title=\"Total Deaths\"\n                        value={this.separator(\n                          this.state.dataArray.global_deaths\n                        )}\n                        color=\"#D80505\"\n                      ></StatCard>\n                    </Col>\n                    <Col xs={12} md={6} className=\"mt-2 pr-0\">\n                      <StatCard\n                        title=\"Total Recovered\"\n                        value={this.separator(\n                          this.state.dataArray.global_recovered\n                        )}\n                        color=\"#5AA001\"\n                      ></StatCard>\n                    </Col>\n                  </Row>\n                </Container>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n\n        <div>\n          <Container style={{ width: \"100%\" }} className=\"pr-0 mt-5\">\n            {/*<Row style={{width: \"100%\",}} className=\"pr-0 mt-2 \">*/}\n            {/*    <Col>*/}\n            {/*        <h5>Sri Lankan Hospital Overview</h5>*/}\n            {/*    </Col>*/}\n\n            {/*</Row>*/}\n            <Row style={{ width: \"100%\" }} className=\"pr-0 mt-2\">\n              <Col xs={12} className=\"pr-0 mt-2\">\n                <Card\n                  text=\"white\"\n                  style={{ minWidth: \"15rem\", backgroundColor: \"#D1A000\" }}\n                >\n                  <Card.Body>\n                    <Card.Title>Active COVID-19 cases in Sri Lanka</Card.Title>\n                    <Card.Text style={{ fontSize: \"48px\" }}>\n                      {this.separator(this.state.dataArray.local_active_cases)}\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              </Col>\n              {/*<Col xs={12} md={6} className=\"pr-0 mt-2\">*/}\n              {/*    <Card text=\"white\" style={{minWidth: '15rem', backgroundColor: \"#D1A000\"}}>*/}\n              {/*        <Card.Body>*/}\n              {/*            <Card.Title>Total number of individuals hospitalized in Sri Lanka</Card.Title>*/}\n              {/*            <Card.Text style={{fontSize: \"48px\"}}>*/}\n              {/*                {this.separator(this.state.dataArray.local_total_number_of_individuals_in_hospitals)}*/}\n              {/*            </Card.Text>*/}\n              {/*        </Card.Body>*/}\n              {/*    </Card>*/}\n              {/*</Col>*/}\n            </Row>\n\n            {/*Code segment to display the statistics of hospitals*/}\n            {/*<Row style={{width: \"100%\"}} className=\"pr-0 mt-2 mb-2\">*/}\n            {/*    {*/}\n            {/*        this.state.hospitalArray.map((hospital, key) =>*/}\n            {/*            <Col xs={12} md={6} className=\"mt-1 mb-2 pr-0\">*/}\n            {/*                <HospitalCard*/}\n            {/*                    name={hospital.hospital.name}*/}\n            {/*                    namesi={hospital.hospital.name_si}*/}\n            {/*                    totalTreatment={hospital.treatment_total}*/}\n            {/*                    localTreatment={hospital.treatment_local}*/}\n            {/*                    foreignTreatment={hospital.treatment_foreign}*/}\n            {/*                >*/}\n\n            {/*                </HospitalCard>*/}\n            {/*            </Col>*/}\n            {/*        )*/}\n            {/*    }*/}\n            {/*</Row>*/}\n          </Container>\n        </div>\n\n        <div>\n          <Container style={{ width: \"100%\" }} className=\"mt-5\">\n            <Row style={{ width: \"100%\" }} className=\"pr-0 mt-2 \">\n              <Col>\n                <h5>Growth of COVID-19 confirmed cases in Sri Lanka</h5>\n              </Col>\n            </Row>\n            <ConfirmedStatChart></ConfirmedStatChart>\n          </Container>\n        </div>\n\n        <div>\n          <Container style={{ width: \"100%\" }} className=\"mt-5\">\n            <Row style={{ width: \"100%\" }} className=\"pr-0 mt-2 \">\n              <Col>\n                <h5>Daily count of COVID-19 confirmed cases in Sri Lanka</h5>\n              </Col>\n            </Row>\n            <DayByDayChart></DayByDayChart>\n          </Container>\n        </div>\n\n        <Navbar bg=\"dark\" variant=\"dark\" className=\"mt-5\">\n          <Navbar.Brand href=\"\">Sources -</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"https://hpb.health.gov.lk/en/api-documentation?fbclid=IwAR0JWu_XtDsXHk5ZzN0xkYDd2V2Hc5-tQ7XHTO7Oh2FqJberHSNMbD1gzzs\">\n              Health Promotion Bureau\n            </Nav.Link>\n            <Nav.Link href=\"https://documenter.getpostman.com/view/10808728/SzS8rjbc?version=latest#27454960-ea1c-4b91-a0b6-0468bb4e6712\">\n              CORONAVIRUS COVID19 API - getpostman.com\n            </Nav.Link>\n          </Nav>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default Homepage;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Homepage from './Homepage'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Homepage ></Homepage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}